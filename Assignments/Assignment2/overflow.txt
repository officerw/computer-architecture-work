# Assignment: Logisim ALU

# For two's complement addition and subtraction, overflow occurence depends
# on the sign bits of the operands and the operation.

# For addition, there are only two cases that indicate overflow. The first
# case is when the sign bits of a and b are both 0 (positive), but the sum
# of the sign bits is 1 (negative). The second case is when the sign bits of
# a and b are both 1 (negative), but the sum of the sign bits is 0 (positive).

# For subtraction, there are also only two cases that indicate overflow. The
# first case is when the sign bits of a and b are 0 (positive) and 1 (negative)
# respectively, but the subtraction of the sign bits is 1 (negative). The
# second case is when the sign bits of a and b are 1 (negative) and 0 (positive)
# respectively, but the subtraction of the sign bits is 0 (positive).

# Here is a truth table. For overflow, 1 indicates there is overflow.
# Whenever we are subtracting a and b, b_invert is asserted, meaning that
# we can use the value of b_invert to indicate subtraction.
# The values of a and b are the values of the most significant bit for
# a and b.

b_invert      a      b     sum overflow
       0      0      0       0        0
       0      0      0       1        1
       0      0      1       0        0
       0      0      1       1        0
       0      1      0       0        0
       0      1      0       1        0
       0      1      1       0        1
       0      1      1       1        0
       1      0      0       0        0
       1      0      0       1        0
       1      0      1       0        0
       1      0      1       1        1
       1      1      0       0        1
       1      1      0       1        0
       1      1      1       0        0
       1      1      1       1        0

# Here is the equivalent logical expression:

# overflow = -b_invert * (-a * -b * sum + a * b * -sum) + b_invert * (-a * b * sum + a * -b * -sum)
